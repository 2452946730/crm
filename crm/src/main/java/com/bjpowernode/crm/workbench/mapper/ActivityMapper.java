package com.bjpowernode.crm.workbench.mapper;

import com.bjpowernode.crm.workbench.model.Activity;
import org.apache.ibatis.annotations.Param;

import java.util.List;
import java.util.Map;

public interface ActivityMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Thu Aug 25 16:29:16 CST 2022
     */
    int deleteByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Thu Aug 25 16:29:16 CST 2022
     */
    int insert(Activity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Thu Aug 25 16:29:16 CST 2022
     */
    int insertSelective(Activity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Thu Aug 25 16:29:16 CST 2022
     */
    Activity selectByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Thu Aug 25 16:29:16 CST 2022
     */
    int updateByPrimaryKeySelective(Activity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Thu Aug 25 16:29:16 CST 2022
     */
    int updateByPrimaryKey(Activity record);

    /**
     * 保存市场活动
     * @param activity
     * @return
     */
    int insertActivity(Activity activity);

    /**
     * 根据条件查询市场活动并分页
     * @param map
     * @return
     */
    List<Activity> selectActivityByConditionForPage(Map<String,Object> map);

    /**
     * 根据条件查询市场活动总条数
     * @param map
     * @return
     */
    int selectCountByActivityForCondition(Map<String,Object> map);

    /**
     * 根据id批量删除市场活动
     * @param ids
     * @return
     */
    int deleteActivityByIds(String[] ids);

    /**
     * 根据id查询市场活动
     * @param id
     * @return
     */
    Activity selectActivityById(String id);

    /**
     * 更新市场活动
     * @param activity
     * @return
     */
    int updateActivity(Activity activity);

    /**
     * 批量导出市场活动
     * @return
     */
    List<Activity> selectAllActivity();

    /**
     * 选择导出市场活动
     * @param ids
     * @return
     */
    List<Activity> selectActivityByIds(String[] ids);

    /**
     * 导入数据
     * @param activityList
     * @return
     */
    int insertActivityByList(List<Activity> activityList);

    /**
     * 根据id查询市场活动明细
     * @param id
     * @return
     */
    Activity selectActivityForDetailById(String id);

    /**
     * 根据线索的id 查询所关联的市场活动
     * @param clueId
     * @return
     */
    List<Activity> selectActivityByClueId(String clueId);

    /**
     * 根据市场活动的名字模糊查询没有跟此线索关联的
     * @return
     */
    List<Activity> selectActivityByNameClueId(Map map);

    /**
     *   查询关联的线索  根据市场活动id
     * @param activityId
     * @return
     */
    List<Activity> selectActivityForDetailByIds(String[] activityId);

    /**
     * 根据市场活动的name模糊查询域此线索关联的市场活动
     * @param map
     * @return
     */
    List<Activity> selectActivityForConvertByNameAndClueId(Map map);

    /**
     * 根据名称模糊查询市场活动
     * @return
     */
    List<Activity> selectActivityForTran(@Param("activityName") String activityName);
}
